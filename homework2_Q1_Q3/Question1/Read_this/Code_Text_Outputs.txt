
R version 4.4.0 (2024-04-24 ucrt) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #HW2 Seyyed Amirreza Mousavi Majd
> #Student Number = 610799001
> 
> ####################
> 
> ###Initialization: load libraries, import datasets, declare functions
> 
> library(ggplot2)
Learn more about the underlying theory at https://ggplot2-book.org/
> library(pheatmap)
> library(factoextra)
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
> library(fossil)
Loading required package: sp
Loading required package: maps
Loading required package: shapefiles
Loading required package: foreign

Attaching package: ‘shapefiles’

The following objects are masked from ‘package:foreign’:

    read.dbf, write.dbf

> 
> pathbased = read.table("pathbased.txt")
> spiral = read.table("spiral.txt")
> jain = read.table("jain.txt")
> flame = read.table("flame.txt")
> s1 = read.table("s1.txt")
> s4 = read.table("s4.txt")
> 
> 
> purity_index_calc = function(predicted_cluster_assignments,real_cluster_assignments){
+   
+   pred = tabulate(predicted_cluster_assignments)
+   real = tabulate(real_cluster_assignments)
+   conf_matrix = t( cbind(pred,real))
+   purity_index = (max(pred)+max(real))/sum(conf_matrix)
+   return(purity_index)
+ }
> 
> 
> pdf("graphical_results.pdf")
> 
> #Q1
> 
> 
> ##for dataset = pathbased k = 3
> ##for dataset = spiral k = 3
> ##for dataset = jain k = 2
> ##for dataset = flame k = 2
> ##for dataset = s1 k = 15. purity index not applicable.
> ##for dataset = s4 k = 15. purity index not applicable
> 
> 
> 
> 
> do_my_homework_Q1 = function(df,df_K,Is_purity_index_applicable,tag){
+ 
+ print(paste("Analysis on",tag))
+ rand_index_classifactions_df = as.data.frame(matrix(0,nrow = NROW(df),ncol = 4))
+ colnames(rand_index_classifactions_df)=c("knn","hc_average","hc_single","hc_complete")
+ 
+ ###a&b&c
+ 
+ ####i
+ k1=kmeans(df, centers = df_K, nstart = 25)
+ 
+ if(Is_purity_index_applicable){
+ print(fviz_cluster(k1,data=df[,-3],main = paste("knn clustering ",tag)))
+ }
+ else{
+ print(fviz_cluster(k1,data=df,main = paste("knn clustering",tag)))#s1 and s4 do not have column #3 i.e. class assignment
+ }
+ 
+ rand_index_classifactions_df$knn = k1$cluster
+ 
+ if(Is_purity_index_applicable){
+ print(paste("Purity index is",purity_index_calc(k1$cluster,df$V3)," for knn vs real"))
+ }
+ 
+ ####ii
+ hc_average_df = hclust(d = dist(df,method = "euclidean"), method = "average")
+ print(plot(hc_average_df,main = paste("average hc for ",tag),cex = 0.1)) #cex is font size. small to avoid crowded plots.
+ dummy_storage = rect.hclust(hc_average_df,k=df_K,border = 1:df_K)
+ #better plot
+ print(ggplot(df)+
+ geom_point(aes(x = V1, y = V2, color = as.factor(cutree(hc_average_df,k = df_K))))
+ )
+ 
+ if(Is_purity_index_applicable){
+ print(paste("Purity index is",purity_index_calc(cutree(hc_average_df,k = df_K),df$V3)," for hc_average vs real"))
+ }
+ 
+ rand_index_classifactions_df$hc_average = cutree(hc_average_df,k = df_K)
+ 
+ 
+ ####iii
+ hc_single_df = hclust(d = dist(df,method = "euclidean"), method = "single")
+ print(plot(hc_single_df,main = paste("single hc for",tag),cex = 0.1))
+ dummy_storage = rect.hclust(hc_single_df,k=df_K,border = 1:df_K)
+ 
+ #better plot
+ print(ggplot(df)+
+ geom_point(aes(x = V1, y = V2, color = as.factor( cutree(hc_single_df,k = df_K))))
+ )
+ 
+ if(Is_purity_index_applicable){
+ print(paste("Purity index is",purity_index_calc(cutree(hc_single_df,k = df_K),df$V3)," for hc_single vs real"))
+ }
+ 
+ rand_index_classifactions_df$hc_single = cutree(hc_single_df,k = df_K)
+ 
+ 
+ ####iv
+ hc_complete_df = hclust(d = dist(df,method = "euclidean"), method = "complete")
+ print(plot(hc_complete_df,main = paste("complete hc for",tag), cex = 0.1))
+ dummy_storage = rect.hclust(hc_complete_df,k=df_K,border = 1:df_K)
+ 
+ #better plot
+ print(ggplot(df)+
+ geom_point(aes(x = V1, y = V2, color = as.factor( cutree(hc_complete_df,k = df_K))))
+ )
+ 
+ if(Is_purity_index_applicable){
+ print(paste("Purity index is",purity_index_calc(cutree(hc_complete_df,k = df_K),df$V3)," for hc_complete vs real"))
+ }
+ 
+ 
+ rand_index_classifactions_df$hc_complete = cutree(hc_complete_df,k = df_K)
+ 
+ 
+ ########Rand index summing up
+ ridf = rand_index_classifactions_df #a name for cleaner codes
+ print("classification results point by point: head records")
+ print(head(ridf)) #for clarification
+ 
+ heat_matrix = matrix(0,nrow = 4,ncol = 4)
+ for(i in 1:4) {
+   for(j in 1:4){
+     heat_matrix[i,j] = rand.index(ridf[,i],ridf[,j])
+   }
+ }
+ 
+ heat_matrix = as.data.frame(heat_matrix,row.names = colnames(ridf))
+ colnames(heat_matrix) = rownames(heat_matrix)
+ 
+ print("Rand index matrix is :")
+ print(heat_matrix)
+ pheatmap(heat_matrix,main = paste(tag," rand index heatmap"))
+ 
+ }
> ###############################################################################
> 
> ################################################################################
> 
> ########################################################################################
> 
> ###############################################################################
> 
> ##############################################################################
> 
> 
> 
> ##for dataset = pathbased k = 3
> ##for dataset = spiral k = 3
> ##for dataset = jain k = 2
> ##for dataset = flame k = 2
> ##for dataset = s1 k = 15. purity index not applicable.
> ##for dataset = s4 k = 15. purity index not applicable
> 
> 
> do_my_homework_Q1(df = pathbased,df_K = 3,Is_purity_index_applicable = T,tag = "pathbased")
[1] "Analysis on pathbased"
[1] "Purity index is 0.406666666666667  for knn vs real"
NULL
[1] "Purity index is 0.413333333333333  for hc_average vs real"
NULL
[1] "Purity index is 0.68  for hc_single vs real"
NULL
[1] "Purity index is 0.438333333333333  for hc_complete vs real"
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1   2          1         1           1
2   2          1         1           1
3   2          1         1           1
4   2          1         1           1
5   2          1         1           1
6   2          1         1           1
[1] "Rand index matrix is :"
                  knn hc_average hc_single hc_complete
knn         1.0000000  0.9818729 0.4077592   0.9036343
hc_average  0.9818729  1.0000000 0.4149164   0.9208696
hc_single   0.4077592  0.4149164 1.0000000   0.4310368
hc_complete 0.9036343  0.9208696 0.4310368   1.0000000
> 
> do_my_homework_Q1(df = spiral,df_K = 3,Is_purity_index_applicable = T,tag = "spiral")
[1] "Analysis on spiral"
[1] "Purity index is 0.344551282051282  for knn vs real"
NULL
[1] "Purity index is 0.416666666666667  for hc_average vs real"
NULL
[1] "Purity index is 0.33974358974359  for hc_single vs real"
NULL
[1] "Purity index is 0.408653846153846  for hc_complete vs real"
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1   1          1         1           1
2   1          1         1           1
3   1          1         1           1
4   1          1         1           1
5   1          1         1           1
6   1          1         1           1
[1] "Rand index matrix is :"
                  knn hc_average hc_single hc_complete
knn         1.0000000  0.7123011 0.5541677   0.7866683
hc_average  0.7123011  1.0000000 0.5366065   0.6165389
hc_single   0.5541677  0.5366065 1.0000000   0.5415945
hc_complete 0.7866683  0.6165389 0.5415945   1.0000000
> 
> do_my_homework_Q1(df = jain,df_K = 2,Is_purity_index_applicable = T, tag = "jain")
[1] "Analysis on jain"
[1] "Purity index is 0.634048257372654  for knn vs real"
NULL
[1] "Purity index is 0.766756032171582  for hc_average vs real"
NULL
[1] "Purity index is 0.739946380697051  for hc_single vs real"
NULL
[1] "Purity index is 0.766756032171582  for hc_complete vs real"
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1   1          1         1           1
2   1          1         1           1
3   1          1         1           1
4   1          1         1           1
5   1          1         1           1
6   1          1         1           1
[1] "Rand index matrix is :"
                  knn hc_average hc_single hc_complete
knn         1.0000000  0.6090115 0.6590850   0.6090115
hc_average  0.6090115  1.0000000 0.8982386   1.0000000
hc_single   0.6590850  0.8982386 1.0000000   0.8982386
hc_complete 0.6090115  1.0000000 0.8982386   1.0000000
> 
> do_my_homework_Q1(df = flame,df_K = 2,Is_purity_index_applicable = T, tag = "flame")
[1] "Analysis on flame"
[1] "Purity index is 0.579166666666667  for knn vs real"
NULL
[1] "Purity index is 0.583333333333333  for hc_average vs real"
NULL
[1] "Purity index is 0.814583333333333  for hc_single vs real"
NULL
[1] "Purity index is 0.75  for hc_complete vs real"
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1   1          1         1           1
2   1          1         1           1
3   1          2         2           1
4   1          2         2           1
5   1          2         2           1
6   1          2         2           1
[1] "Rand index matrix is :"
                  knn hc_average hc_single hc_complete
knn         1.0000000  0.5594142 0.4996165   0.5336123
hc_average  0.5594142  1.0000000 0.4987796   0.5430962
hc_single   0.4996165  0.4987796 1.0000000   0.7740934
hc_complete 0.5336123  0.5430962 0.7740934   1.0000000
> 
> do_my_homework_Q1(df = s1,df_K = 15,Is_purity_index_applicable = F, tag = "s1")
[1] "Analysis on s1"
NULL
NULL
NULL
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1  15          1         1           1
2  15          1         1           1
3  15          1         1           1
4  15          1         1           1
5  15          1         1           1
6  15          1         1           1
[1] "Rand index matrix is :"
                  knn hc_average hc_single hc_complete
knn         1.0000000  0.9880022 0.8655059   0.9883373
hc_average  0.9880022  1.0000000 0.8755105   0.9964534
hc_single   0.8655059  0.8755105 1.0000000   0.8742657
hc_complete 0.9883373  0.9964534 0.8742657   1.0000000
> 
> do_my_homework_Q1(df = s4,df_K = 15,Is_purity_index_applicable = F, tag = "s4")
[1] "Analysis on s4"
NULL
NULL
NULL
[1] "classification results point by point: head records"
  knn hc_average hc_single hc_complete
1   3          1         1           1
2   3          2         1           1
3   1          2         1           2
4   2          1         1           3
5   3          2         1           1
6   3          2         1           1
[1] "Rand index matrix is :"
                   knn hc_average  hc_single hc_complete
knn         1.00000000  0.9381335 0.07498436   0.9280954
hc_average  0.93813347  1.0000000 0.11099836   0.9263122
hc_single   0.07498436  0.1109984 1.00000000   0.1000587
hc_complete 0.92809538  0.9263122 0.10005865   1.0000000
> 
> dev.off()
null device 
          1 
> 